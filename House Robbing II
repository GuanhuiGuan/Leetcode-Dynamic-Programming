class Solution:
    """
    @param: nums: An array of non-negative integers.
    @return: The maximum amount of money you can rob tonight
    """
    def houseRobber2(self, nums):
        # write your code here
        
        # 2 loops of DP with different initializations. 
        # (1) Did not rob the first house
        if len(nums) == 0 or len(nums) == 2:
            return 0;
        elif len(nums) == 1:
            return nums[0];
        
        h = [0] * len(nums);
        h[0] = 0;
        h[1] = nums[1];
        for i in range(2, len(nums)):
            h[i] = max(h[i - 2] + nums[i], h[i - 1]);
            
        buf = h[len(nums) - 1];
        
        # (2) Rob the first house
        h[0] = nums[0];
        h[1]= max(nums[0], nums[1]);
        for i in range(2, len(nums)):
            h[i] = max(h[i - 2] + nums[i], h[i - 1]);
        
        
        return max(buf, h[len(nums) - 2]);# In the second scenario, the last house cannot be robbed, and thus we only need history of the second to last.

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 0){return 0;}
        if(n == 1){return nums[0];}
        
        int max = nums[0];
        int[] dp = new int[n];
        dp[0] = nums[0];//0 to n-2 houses
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i = 2; i < n - 1; i++){
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
        }
        max = dp[n - 2];
        dp[0] = 0;
        dp[1] = nums[1];//1 to n-1 houses
        for(int i = 2; i < n; i++){
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
        }
        max = Math.max(max, dp[n - 1]);
        return max;
    }
}
