class Solution:
    """
    @param: obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # write your code here
        m = len(obstacleGrid);
        n = len(obstacleGrid[0]);

            
        # a larger matrix for dp
        dp = [];
        for i in range(m + 1):
            dp.append([]);
        for i in range(m + 1):
            for j in range(n + 1):
                dp[i].append(0);
        
        #Initialization
        dp[0][1] = 1;
                
        #DP
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if obstacleGrid[i - 1][j - 1] != 1:
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
        print(dp);
                    
        return dp[-1][-1];
